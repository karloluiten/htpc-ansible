---
- name: docker repo requires https transport
  apt: pkg=apt-transport-https state=present update_cache=no

- apt_repository: repo="deb https://get.docker.com/ubuntu docker main" state=absent
- apt: pkg=lxc-docker state=absent purge=yes

  # Ubuntu 14.04
- name: install apt-key docker
  apt_key: keyserver="p80.pool.sks-keyservers.net" id="58118E89F3A912897C070ADBF76221572C52609D"
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '14.04'

- name: Add the Docker repository to APT sources
  apt_repository: repo="deb https://apt.dockerproject.org/repo ubuntu-trusty main" state=present
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '14.04'

  # Ubuntu 16.04
- name: install apt-key docker
  apt_key: keyserver="p80.pool.sks-keyservers.net" id="58118E89F3A912897C070ADBF76221572C52609D"
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '16.04'

- name: Add the Docker repository to APT sources
  apt_repository: repo="deb https://apt.dockerproject.org/repo ubuntu-xenial main" state=present
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version == '16.04'

- name: Install docker and dependencies
  apt: pkg={{item}} state=present update_cache=yes
  with_items:
   - docker-engine
   - apparmor

- name: Set docker daemon config
  copy:
    src: docker_daemon.json
    dest: /etc/docker/daemon.json
    owner: root
    group: root
  notify: restart docker

- name: add users to docker group
  user: name={{ item }} groups=docker append=yes
  with_items: "{{ docker.users }}"

- name: start docker service
- service: name=docker state=started

- include: docker-py.yml
  when: dockerpy

- name: Create .docker directories for every docker user
  file: path=/home/{{ item }}/.docker state=directory owner={{ item }} group={{ item }}
  with_items: "{{ docker.users }}"

- template: src=dockercfg.j2 dest=/home/{{ item }}/.docker/config.json mode=600 owner={{ item }} group={{ item }}
  with_items: "{{ docker.users }}"

- name: start cAdvisor container
  become: yes
  become_method: sudo
  docker:
    name: cAdvisor
    privileged: yes
    image: "google/cadvisor:latest"
    state: reloaded
    pull: missing
    restart_policy: always
    ports:
    - "8030:8080"
    volumes:
      - "/:/rootfs:ro"
      - "/var/run:/var/run:rw"
      - "/sys:/sys:ro"
      - "/var/lib/docker/:/var/lib/docker:ro"
